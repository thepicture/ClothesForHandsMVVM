//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClothesForHandsMVVM.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.Runtime.CompilerServices;

    public partial class Material : INotifyPropertyChanged
    {
        private int id;
        private string title;
        private int countInPack;
        private string unit;
        private double? countInStock;
        private double minCount;
        private string description;
        private decimal cost;
        private string image;
        private int materialTypeID;

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Material()
        {
            this.MaterialCountHistories = new HashSet<MaterialCountHistory>();
            this.ProductMaterials = new HashSet<ProductMaterial>();
            this.Suppliers = new HashSet<Supplier>();
        }
        public int ID
        {
            get => id; set
            {
                id = value;
                OnPropertyChanged(nameof(ID));
            }
        }
        public string Title
        {
            get => title; set
            {
                title = value;
                OnPropertyChanged(nameof(Title));
            }
        }
        public int CountInPack
        {
            get => countInPack; set
            {
                countInPack = value;
                OnPropertyChanged(nameof(CountInPack));
            }
        }
        public string Unit
        {
            get => unit; set
            {
                unit = value;
                OnPropertyChanged(nameof(Unit));
            }
        }
        public Nullable<double> CountInStock
        {
            get => countInStock; set
            {
                countInStock = value;
                OnPropertyChanged(nameof(CountInStock));
            }
        }
        public double MinCount
        {
            get => minCount; set
            {
                minCount = value;
                OnPropertyChanged(nameof(minCount));
            }
        }
        public string Description
        {
            get => description; set
            {
                description = value;
                OnPropertyChanged(nameof(Description));
            }
        }
        public decimal Cost
        {
            get => cost; set
            {
                cost = value;
                OnPropertyChanged(nameof(Cost));
            }
        }
        public string Image
        {
            get => image; set
            {
                image = value;
                OnPropertyChanged(nameof(Image));
            }
        }
        public Uri ImagePreview
        {
            get
            {
                return new Uri("pack://application:,,,/Resources" + Image);
            }
        }
        public int MaterialTypeID
        {
            get => materialTypeID; set
            {
                materialTypeID = value;
                OnPropertyChanged(nameof(MaterialTypeID));
            }
        }

        public virtual MaterialType MaterialType { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<MaterialCountHistory> MaterialCountHistories { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProductMaterial> ProductMaterials { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Supplier> Suppliers { get; set; }

        public event PropertyChangedEventHandler PropertyChanged;

        private void OnPropertyChanged([CallerMemberName] string propertyName = null)
        {
            if (PropertyChanged != null)
            {
                PropertyChanged.Invoke(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    }
}
